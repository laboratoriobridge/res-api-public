package br.ufsc.bridge.res.rest;

import static org.hamcrest.CoreMatchers.not;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;
import static org.junit.matchers.JUnitMatchers.hasItem;

import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.util.Date;
import java.util.List;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import br.ufsc.bridge.res.domain.Sort;
import br.ufsc.bridge.res.domain.TipoDocumento;
import br.ufsc.bridge.res.service.rest.repository.RestRepositoryService;
import br.ufsc.bridge.res.service.rest.repository.dto.ItemDTO;
import br.ufsc.bridge.res.service.rest.repository.dto.SaveDTO;

@RunWith(JUnit4.class)
public class RestRepositorySaveTest {

	private SaveDTO dto;

	private RestRepositoryService service;

	private static final String URL = "https://ehr-services.rnds.mbamobi.com.br/ehr-services/fhir/r4/DocumentReference";

	private static final String PROFISSIONAL = "PractitionerRole/a4";

	private static final String UNIDADE = "Organization/a9";

	private static final String PACIENTE = "Patient/789";

	@Before
	public void setup() throws KeyManagementException, NoSuchAlgorithmException {
		this.service = new RestRepositoryService(URL);

		this.dto = SaveDTO.builder()
				.data(new Date())
				.pacienteId(PACIENTE)
				.unidadeId(UNIDADE)
				.profissionalId(PROFISSIONAL)
				.documento(this.DATA)
				.tipoDocumento(TipoDocumento.SUMARIO_ALTA)
				.build();
	}

	@Test
	public void save() {
		String uuid = this.service.save(this.dto);
		Assert.assertNotNull(uuid);
	}

	@Test
	public void read() {
		// given
		String uuid = this.service.save(this.dto);

		// when
		SaveDTO dto = this.service.read(uuid);

		// then
		// assertEquals(DATA, dto.getDocumento()); FIXME: O endpoint sempre retorna o mesmo doc
		assertEquals(PACIENTE, dto.getPacienteId());
		assertEquals(PROFISSIONAL, dto.getProfissionalId());
		assertEquals(UNIDADE, dto.getUnidadeId());

	}

	@Test
	public void listAsc() throws KeyManagementException, NoSuchAlgorithmException {
		// given
		String uuid1 = this.service.save(this.dto);
		String uuid2 = this.service.save(this.dto);

		// when
		List<ItemDTO> result = this.service.list(PACIENTE, Sort.ASC);

		// then

		assertTrue(result.size() >= 10);
		assertThat(result, not(hasItem(new ItemDTO(uuid1, URL + "/" + uuid1, TipoDocumento.SUMARIO_ALTA))));
		assertThat(result, not(hasItem(new ItemDTO(uuid2, URL + "/" + uuid2, TipoDocumento.SUMARIO_ALTA))));
	}

	@Test
	public void listDesc() throws InterruptedException, KeyManagementException, NoSuchAlgorithmException {
		// given
		String uuid1 = this.service.save(this.dto);
		String uuid2 = this.service.save(this.dto);
		Thread.sleep(1000); // Workaround para dar tempo do doc ser criado

		// when
		List<ItemDTO> result = this.service.list(PACIENTE, Sort.DESC);

		// then
		assertTrue(result.size() >= 10);
		assertThat(result, hasItem(new ItemDTO(uuid1, URL + "/" + uuid1, TipoDocumento.SUMARIO_ALTA)));
		assertThat(result, hasItem(new ItemDTO(uuid2, URL + "/" + uuid2, TipoDocumento.SUMARIO_ALTA)));
	}

	private final String DATA =
			"";

}
